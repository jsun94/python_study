import os

class Node(object):
    def __init__(self, value = None, pointer = None):
        self.value = value
        self.pointer = pointer
        
    def getData(self):
        return self.value
    
    def getNext(self):
        return self.pointer
    
    def setData(self, newdata):
        self.value = newdata
        
    def setNext(self, newpointer):
        self.pointer = newpointer
        
if __name__ == "__main__":
    L = Node("a", Node("b", Node("c",Node("d"))))
    assert(L.pointer.pointer.value == 'c')
    
    print(L.getData())
    print(L.getNext().getData())
    L.setData('aa') #a -> aa
    L.setNext(Node('e'))
    print(L.getData())
    print(L.getNext().getData())

#from node import Node

class LinkedListFIFO(object):
    def __init__(self):
        self.head = None
        self.length = 0
        self.tail = None
        
    #헤드부터 각 노드의 값 출력
    def _printList(self):
        node = self.head
        #print('Head', end = " ")
        while node:
            print("->[%d]"%node.value, end = " ")
            node = node.pointer
        print()
        
    #첫 번째 위치에 노드를 추가한다.
    def _addFirst(self, value):
        self.length = 1
        node = Node(value)
        self.head = node
        self.tail = node
        
    #첫 번쨰 위치의 노드를 삭제한다.
    def _deleteFirst(self):
        self.length = 0
        self.head = None
        self.tail = None
        print('연결 리스트가 비었습니다.')
        
    #이전 노드를 기반으로 노드 삭제
    def _delete(self, prev, node):
        self.length -= 1
        if not prev:
            self.head = node.pointer
        else:
            prev.pointer = node.pointer
            
    #새 노드를 추가한다. 테일이 있다면, 테일의 다음 노드는 
    #새 노드를 가리키고, 테일은 새 노드를 가리킨다.
    def _add(self, value):
        self.length += 1
        node = Node(value)
        if self.tail:
            self.tail.pointer = node
        self.tail = node
        
    #새 노드 추가
    def addNode(self, value):
        if not self.head:
            self._addFirst(value)
        else:
            self._add(value)
        
    #인덱스로 노드를 찾는다.
    def _find(self, index):
        prev = None
        node = self.head
        i = 0
        while node and i < index:
            prev = node
            node = node.pointer
            i += 1
        return node, prev, i
        
    #값으로 노드를 찾는다.
    def _find_by_value(self, value):
        prev = None
        node = self.head
        found = False
        while node and not found:
            if node.value == value:
                found = True
            else:
                prev = node
                node = node.pointer
        return node, prev, found
    
    #인덱스에 해당하는 노드를 찾아서 삭제
    def deleteNode(self, index):
        if not self.head or not self.head.pointer:
            self._deleteFirst()
        else:
            node, prev, i = self._find(index)
            if i == index and node:
                self.length -= 1
                if i == 0 or not prev :
                    self.head = node.pointer
                    self.tail = node.pointer
                else:
                    prev.pointer = node.pointer
            else:
                print("인덱스 {0}에 해당하는 노드가 없습니다.".format(index))
            
    #값에 해당하는 노드를 찾아서 삭제
    def deleteNodeByValue(self, value):
        if not self.head or not self.head.pointer:
            self._deleteFirst()
        else:
            node, prev, i = self._find_by_value(value)
            if node and node.value == value:
                self.length -= 1
                if i == 0 or not prev:
                    self.head = node.pointer
                    self.tail = node.pointer
                else:
                    prev.pointer = node.pointer
            else:
                print("값 {0}에 해당하는 노드가 없습니다.".format(value))
            
if __name__ == "__main__":
    l1 = LinkedListFIFO()
    for i in range(1,5):
        l1.addNode(i)
    print("연결 리스트 출력 :")
    l1._printList()
    print("인덱스가 2인 노드 삭제 후, 연결 리스트 출력:")
    l1.deleteNode(2) #값이 2가 아닌 인덱스가 2인 것임을 유의
    
    l1._printList()
    print("값이 15인 노드 추가 후, 연결 리스트 출력:")
    l1.addNode(15)
    l1._printList()
    print("모든 노드 모두 삭제 후 연결 리스트 출력:")
    for i in range(l1.length -1, -1, -1):
        l1.deleteNode(i)
    l1._printList()
    

def clear():
    os.system('cls')

class HashTableLL(object):
    def __init__(self,size):
        self.size = size
        self.slots = []
        self._createHashTable()
        
    def _createHashTable(self):
        for i in range(self.size):
            self.slots.append(LinkedListFIFO())
            
    def _find(self, item):
        return item % self.size
    
    def _add(self, item):
        index = self._find(item)
        self.slots[index].addNode(item)
        
    def _delete(self, item):
        index = self._find(item)
        self.slots[index].deleteNodeByValue(item)
        
    def _print(self):
        clear()
        for i in range(self.size):
            print("[{0}]:".format(i), end = " ")
            self.slots[i]._printList()
            
def test_hash_tables():
    H1 = HashTableLL(7)
    for i in range(0,20):
        H1._add(i)
        H1._print()
    print("\n항목 0,1,2를 삭제합니다.")
    H1._delete(0)
    H1._delete(1)
    H1._delete(2)
    H1._print()
        
if __name__ == "__main__":
    test_hash_tables()